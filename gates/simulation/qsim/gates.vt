// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/13/2024 00:34:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    gates
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module gates_vlg_sample_tst(
	a,
	b,
	c,
	sampler_tx
);
input  a;
input  b;
input  c;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or c)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module gates_vlg_check_tst (
	s1,
	s2,
	s3,
	s4,
	s5,
	s6,
	s7,
	s8,
	s9,
	s10,
	s11,
	s12,
	s13,
	s14,
	s15,
	s16,
	s17,
	s18,
	s19,
	s20,
	s21,
	sampler_rx
);
input  s1;
input  s2;
input  s3;
input  s4;
input  s5;
input  s6;
input  s7;
input  s8;
input  s9;
input  s10;
input  s11;
input  s12;
input  s13;
input  s14;
input  s15;
input  s16;
input  s17;
input  s18;
input  s19;
input  s20;
input  s21;
input sampler_rx;

reg  s1_expected;
reg  s2_expected;
reg  s3_expected;
reg  s4_expected;
reg  s5_expected;
reg  s6_expected;
reg  s7_expected;
reg  s8_expected;
reg  s9_expected;
reg  s10_expected;
reg  s11_expected;
reg  s12_expected;
reg  s13_expected;
reg  s14_expected;
reg  s15_expected;
reg  s16_expected;
reg  s17_expected;
reg  s18_expected;
reg  s19_expected;
reg  s20_expected;
reg  s21_expected;

reg  s1_prev;
reg  s2_prev;
reg  s3_prev;
reg  s4_prev;
reg  s5_prev;
reg  s6_prev;
reg  s7_prev;
reg  s8_prev;
reg  s9_prev;
reg  s10_prev;
reg  s11_prev;
reg  s12_prev;
reg  s13_prev;
reg  s14_prev;
reg  s15_prev;
reg  s16_prev;
reg  s17_prev;
reg  s18_prev;
reg  s19_prev;
reg  s20_prev;
reg  s21_prev;

reg  s18_expected_prev;
reg  s19_expected_prev;
reg  s20_expected_prev;
reg  s21_expected_prev;

reg  last_s18_exp;
reg  last_s19_exp;
reg  last_s20_exp;
reg  last_s21_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:21] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 21'b1;
end

// update real /o prevs

always @(trigger)
begin
	s1_prev = s1;
	s2_prev = s2;
	s3_prev = s3;
	s4_prev = s4;
	s5_prev = s5;
	s6_prev = s6;
	s7_prev = s7;
	s8_prev = s8;
	s9_prev = s9;
	s10_prev = s10;
	s11_prev = s11;
	s12_prev = s12;
	s13_prev = s13;
	s14_prev = s14;
	s15_prev = s15;
	s16_prev = s16;
	s17_prev = s17;
	s18_prev = s18;
	s19_prev = s19;
	s20_prev = s20;
	s21_prev = s21;
end

// update expected /o prevs

always @(trigger)
begin
	s18_expected_prev = s18_expected;
	s19_expected_prev = s19_expected;
	s20_expected_prev = s20_expected;
	s21_expected_prev = s21_expected;
end



// expected s21
initial
begin
	s21_expected = 1'bX;
end 

// expected s20
initial
begin
	s20_expected = 1'bX;
end 

// expected s19
initial
begin
	s19_expected = 1'bX;
end 

// expected s18
initial
begin
	s18_expected = 1'bX;
end 
// generate trigger
always @(s1_expected or s1 or s2_expected or s2 or s3_expected or s3 or s4_expected or s4 or s5_expected or s5 or s6_expected or s6 or s7_expected or s7 or s8_expected or s8 or s9_expected or s9 or s10_expected or s10 or s11_expected or s11 or s12_expected or s12 or s13_expected or s13 or s14_expected or s14 or s15_expected or s15 or s16_expected or s16 or s17_expected or s17 or s18_expected or s18 or s19_expected or s19 or s20_expected or s20 or s21_expected or s21)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected s1 = %b | expected s2 = %b | expected s3 = %b | expected s4 = %b | expected s5 = %b | expected s6 = %b | expected s7 = %b | expected s8 = %b | expected s9 = %b | expected s10 = %b | expected s11 = %b | expected s12 = %b | expected s13 = %b | expected s14 = %b | expected s15 = %b | expected s16 = %b | expected s17 = %b | expected s18 = %b | expected s19 = %b | expected s20 = %b | expected s21 = %b | ",s1_expected_prev,s2_expected_prev,s3_expected_prev,s4_expected_prev,s5_expected_prev,s6_expected_prev,s7_expected_prev,s8_expected_prev,s9_expected_prev,s10_expected_prev,s11_expected_prev,s12_expected_prev,s13_expected_prev,s14_expected_prev,s15_expected_prev,s16_expected_prev,s17_expected_prev,s18_expected_prev,s19_expected_prev,s20_expected_prev,s21_expected_prev);
	$display("| real s1 = %b | real s2 = %b | real s3 = %b | real s4 = %b | real s5 = %b | real s6 = %b | real s7 = %b | real s8 = %b | real s9 = %b | real s10 = %b | real s11 = %b | real s12 = %b | real s13 = %b | real s14 = %b | real s15 = %b | real s16 = %b | real s17 = %b | real s18 = %b | real s19 = %b | real s20 = %b | real s21 = %b | ",s1_prev,s2_prev,s3_prev,s4_prev,s5_prev,s6_prev,s7_prev,s8_prev,s9_prev,s10_prev,s11_prev,s12_prev,s13_prev,s14_prev,s15_prev,s16_prev,s17_prev,s18_prev,s19_prev,s20_prev,s21_prev);
`endif
	if (
		( s18_expected_prev !== 1'bx ) && ( s18_prev !== s18_expected_prev )
		&& ((s18_expected_prev !== last_s18_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s18 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s18_expected_prev);
		$display ("     Real value = %b", s18_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_s18_exp = s18_expected_prev;
	end
	if (
		( s19_expected_prev !== 1'bx ) && ( s19_prev !== s19_expected_prev )
		&& ((s19_expected_prev !== last_s19_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s19 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s19_expected_prev);
		$display ("     Real value = %b", s19_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_s19_exp = s19_expected_prev;
	end
	if (
		( s20_expected_prev !== 1'bx ) && ( s20_prev !== s20_expected_prev )
		&& ((s20_expected_prev !== last_s20_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s20 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s20_expected_prev);
		$display ("     Real value = %b", s20_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_s20_exp = s20_expected_prev;
	end
	if (
		( s21_expected_prev !== 1'bx ) && ( s21_prev !== s21_expected_prev )
		&& ((s21_expected_prev !== last_s21_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s21 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s21_expected_prev);
		$display ("     Real value = %b", s21_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_s21_exp = s21_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module gates_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
reg c;
// wires                                               
wire s1;
wire s2;
wire s3;
wire s4;
wire s5;
wire s6;
wire s7;
wire s8;
wire s9;
wire s10;
wire s11;
wire s12;
wire s13;
wire s14;
wire s15;
wire s16;
wire s17;
wire s18;
wire s19;
wire s20;
wire s21;

wire sampler;                             

// assign statements (if any)                          
gates i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.s1(s1),
	.s2(s2),
	.s3(s3),
	.s4(s4),
	.s5(s5),
	.s6(s6),
	.s7(s7),
	.s8(s8),
	.s9(s9),
	.s10(s10),
	.s11(s11),
	.s12(s12),
	.s13(s13),
	.s14(s14),
	.s15(s15),
	.s16(s16),
	.s17(s17),
	.s18(s18),
	.s19(s19),
	.s20(s20),
	.s21(s21)
);

// a
initial
begin
	a = 1'b0;
	a = #20000 1'b1;
	a = #160000 1'b0;
	a = #260000 1'b1;
	a = #240000 1'b0;
end 

// b
initial
begin
	b = 1'b0;
	b = #100000 1'b1;
	b = #180000 1'b0;
	b = #400000 1'b1;
	b = #240000 1'b0;
end 

gates_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.c(c),
	.sampler_tx(sampler)
);

gates_vlg_check_tst tb_out(
	.s1(s1),
	.s2(s2),
	.s3(s3),
	.s4(s4),
	.s5(s5),
	.s6(s6),
	.s7(s7),
	.s8(s8),
	.s9(s9),
	.s10(s10),
	.s11(s11),
	.s12(s12),
	.s13(s13),
	.s14(s14),
	.s15(s15),
	.s16(s16),
	.s17(s17),
	.s18(s18),
	.s19(s19),
	.s20(s20),
	.s21(s21),
	.sampler_rx(sampler)
);
endmodule

